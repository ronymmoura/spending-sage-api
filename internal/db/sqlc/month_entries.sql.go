// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: month_entries.sql

package db

import (
	"context"
	"time"
)

const createMonthEntry = `-- name: CreateMonthEntry :one
INSERT INTO month_entries (
  month_id,
  origin_id,
  category_id,
  name,
  due_date,
  pay_date,
  amount,
  owner
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
)
RETURNING id, month_id, name, due_date, pay_date, paid_date, amount, owner, origin_id, category_id
`

type CreateMonthEntryParams struct {
	MonthID    int64     `json:"month_id"`
	OriginID   int64     `json:"origin_id"`
	CategoryID int64     `json:"category_id"`
	Name       string    `json:"name"`
	DueDate    time.Time `json:"due_date"`
	PayDate    time.Time `json:"pay_date"`
	Amount     int32     `json:"amount"`
	Owner      string    `json:"owner"`
}

func (q *Queries) CreateMonthEntry(ctx context.Context, arg CreateMonthEntryParams) (MonthEntry, error) {
	row := q.db.QueryRow(ctx, createMonthEntry,
		arg.MonthID,
		arg.OriginID,
		arg.CategoryID,
		arg.Name,
		arg.DueDate,
		arg.PayDate,
		arg.Amount,
		arg.Owner,
	)
	var i MonthEntry
	err := row.Scan(
		&i.ID,
		&i.MonthID,
		&i.Name,
		&i.DueDate,
		&i.PayDate,
		&i.PaidDate,
		&i.Amount,
		&i.Owner,
		&i.OriginID,
		&i.CategoryID,
	)
	return i, err
}

const deleteMonthEntry = `-- name: DeleteMonthEntry :exec
DELETE FROM month_entries
WHERE id = $1
`

func (q *Queries) DeleteMonthEntry(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMonthEntry, id)
	return err
}

const editMonthEntry = `-- name: EditMonthEntry :one
UPDATE month_entries
SET name = $2,
    due_date = $3,
    pay_date = $4,
    amount = $5,
    owner = $6,
    origin_id = $7,
    category_id = $8
WHERE id = $1
RETURNING id, month_id, name, due_date, pay_date, paid_date, amount, owner, origin_id, category_id
`

type EditMonthEntryParams struct {
	ID         int64     `json:"id"`
	Name       string    `json:"name"`
	DueDate    time.Time `json:"due_date"`
	PayDate    time.Time `json:"pay_date"`
	Amount     int32     `json:"amount"`
	Owner      string    `json:"owner"`
	OriginID   int64     `json:"origin_id"`
	CategoryID int64     `json:"category_id"`
}

func (q *Queries) EditMonthEntry(ctx context.Context, arg EditMonthEntryParams) (MonthEntry, error) {
	row := q.db.QueryRow(ctx, editMonthEntry,
		arg.ID,
		arg.Name,
		arg.DueDate,
		arg.PayDate,
		arg.Amount,
		arg.Owner,
		arg.OriginID,
		arg.CategoryID,
	)
	var i MonthEntry
	err := row.Scan(
		&i.ID,
		&i.MonthID,
		&i.Name,
		&i.DueDate,
		&i.PayDate,
		&i.PaidDate,
		&i.Amount,
		&i.Owner,
		&i.OriginID,
		&i.CategoryID,
	)
	return i, err
}

const getMonthEntry = `-- name: GetMonthEntry :one
SELECT id, month_id, name, due_date, pay_date, paid_date, amount, owner, origin_id, category_id
FROM month_entries
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMonthEntry(ctx context.Context, id int64) (MonthEntry, error) {
	row := q.db.QueryRow(ctx, getMonthEntry, id)
	var i MonthEntry
	err := row.Scan(
		&i.ID,
		&i.MonthID,
		&i.Name,
		&i.DueDate,
		&i.PayDate,
		&i.PaidDate,
		&i.Amount,
		&i.Owner,
		&i.OriginID,
		&i.CategoryID,
	)
	return i, err
}
