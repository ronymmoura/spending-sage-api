// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: months.sql

package db

import (
	"context"
	"time"
)

const countMonths = `-- name: CountMonths :one
SELECT COUNT(*)
FROM months
WHERE user_id = $1
`

func (q *Queries) CountMonths(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countMonths, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMonth = `-- name: CreateMonth :one
INSERT INTO months (
  user_id,
  date
)
VALUES (
  $1,
  $2
)
RETURNING id, user_id, date
`

type CreateMonthParams struct {
	UserID int64     `json:"user_id"`
	Date   time.Time `json:"date"`
}

func (q *Queries) CreateMonth(ctx context.Context, arg CreateMonthParams) (Month, error) {
	row := q.db.QueryRow(ctx, createMonth, arg.UserID, arg.Date)
	var i Month
	err := row.Scan(&i.ID, &i.UserID, &i.Date)
	return i, err
}

const deleteMonth = `-- name: DeleteMonth :exec
DELETE FROM months
WHERE id = $1
`

func (q *Queries) DeleteMonth(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMonth, id)
	return err
}

const getMonth = `-- name: GetMonth :one
SELECT id, user_id, date
FROM months
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMonth(ctx context.Context, id int64) (Month, error) {
	row := q.db.QueryRow(ctx, getMonth, id)
	var i Month
	err := row.Scan(&i.ID, &i.UserID, &i.Date)
	return i, err
}

const listMonths = `-- name: ListMonths :many
SELECT id, user_id, date
FROM months
WHERE user_id = $1
ORDER BY date DESC
LIMIT $2
OFFSET $3
`

type ListMonthsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMonths(ctx context.Context, arg ListMonthsParams) ([]Month, error) {
	rows, err := q.db.Query(ctx, listMonths, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Month{}
	for rows.Next() {
		var i Month
		if err := rows.Scan(&i.ID, &i.UserID, &i.Date); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
