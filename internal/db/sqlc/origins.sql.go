// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: origins.sql

package db

import (
	"context"
)

const createOrigin = `-- name: CreateOrigin :one
INSERT INTO origins (
  name,
  type
)
VALUES (
  $1,
  $2
)
RETURNING id, name, type
`

type CreateOriginParams struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

func (q *Queries) CreateOrigin(ctx context.Context, arg CreateOriginParams) (Origin, error) {
	row := q.db.QueryRow(ctx, createOrigin, arg.Name, arg.Type)
	var i Origin
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}

const deleteOrigin = `-- name: DeleteOrigin :exec
DELETE FROM origins
WHERE id = $1
`

func (q *Queries) DeleteOrigin(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrigin, id)
	return err
}

const getOrigin = `-- name: GetOrigin :one
SELECT id, name, type
FROM origins
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrigin(ctx context.Context, id int64) (Origin, error) {
	row := q.db.QueryRow(ctx, getOrigin, id)
	var i Origin
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}

const listOrigins = `-- name: ListOrigins :many
SELECT id, name, type
FROM origins
`

func (q *Queries) ListOrigins(ctx context.Context) ([]Origin, error) {
	rows, err := q.db.Query(ctx, listOrigins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Origin{}
	for rows.Next() {
		var i Origin
		if err := rows.Scan(&i.ID, &i.Name, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
